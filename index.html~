<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="generator" content="pandoc">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Jupyter notebooks as quiz question sourcefiles</title>

<!-- Yahoo! CDN combo URL for selected Pure.css modules -->
<link rel="stylesheet" href="http://yui.yahooapis.com/combo?pure/0.6.0/base-min.css&pure/0.6.0/grids-responsive-min.css&pure/0.6.0/menus-min.css&pure/0.6.0/tables-min.css">

<!-- Extra styles -->
<link rel="stylesheet" href="css/extra.css?__inline=true">

</head>
<body>
<section id="page-content">
<div class="pure-g">
<div class="pure-u-1 pure-u-sm-1 pure-u-md-1 pure-u-lg-1 pure-u-xl-1">

<!-- page content begins here -->

<header>
<h1 class="title">Jupyter notebooks as quiz question sourcefiles</h1>
</header>
<section id="background" class="level2">
<h2>Background</h2>
<p>In the worst case scenario, my workflow for posting a quiz on canvas used to involve four separate source documents:</p>
<ol type="1">
<li><p>A docx file containing quiz questions with answers/explanations.</p></li>
<li><p>A separate docx file with the answers stripped that was posted for students to work from prior to enetering their answers on canvas.</p></li>
<li><p>A jupyter python notebook with the numeric answers worked out</p></li>
<li><p>A canvas quiz with the question entered via the canvas web interface</p></li>
</ol>
<p>Fortunately, three of these documents are unnecessary. My current workflow is:</p>
<ol type="1">
<li><p>Write a <a href="https://jupyter.org/">jupyter notebook</a> with the quiz questions and answers. This is a mix of markdown cells for the narative/images, and python cells for the actual calculations. Use jupyter cell metadata to tag each cell as a question or answer, along with the question number and, if multiple choice, the correct answer.</p></li>
<li><p>Save the notebook as a python file using <a href="https://github.com/mwouts/jupytext">jupytext</a> (This is automatic, since the jupytext plugin overrides jupyter’s <code>content_mananger_class</code>).</p></li>
<li><p>Commit to git</p></li>
<li><p>Generate the student version of the quiz by filtering out the answer cells and use <code>jupyter nbconvert</code> to produce a paginated pdf with headers.</p></li>
<li><p>(to be done) Generate the canvas version of the quiz using the <a href="http://www.r-exams.org/">r-exams</a> canvas qti writer.</p></li>
</ol>
<p>For classes that involve student programming, we’ve adopted DSCI 100’s use of <a href="https://nbgrader.readthedocs.io/en/stable/">nbgrader</a>, which is as you know is just a (much) more elaborate version of the workflow above.</p>
</section>
<section id="example" class="level2">
<h2>Example</h2>
</section>
<section id="approach" class="level2">
<h2>Approach</h2>
<p>here is the approach and now this and this and this</p>
<p>and this</p>
</section>

<!-- page content ends here -->

</div>     <!-- pure-u-1... -->
</div>     <!-- pure-g -->
</section> <!-- page-content -->
<div class="pure-g">
<footer><a href="https://bitfragment.github.io/mindoc">mindoc</a> v1.1.0</footer>
</div>
<script src="js/mindoc.js?__inline=true"></script>

<!-- For debugging local scripts -->
<!-- <script src="js/mindoc.js"></script> -->
</body>
</html>
