"""
resize and copy figures to the media_resize folder

usage: python resize_figs.py fig_list.json
"""

import context  #noqa
import re
from pathlib import Path
import json
from e340lib.img_to_md import shrinkit
import click
import jupytext as jp
import shutil
from PIL import Image

re_imgtag = re.compile(r"(<img ([^>]*?)(?:/>|>(.*?)</img>))")
re_mdimg = re.compile(r"(!\[([^\]]*)\]\(([^\)]*)\)\{(.+?)\})")
re_mdimg = re.compile(r"(!\[([^\]]*)\])(\(.*\))(.*)")  # \(([^\)]*)\)\{(.+?)\})")


def get_patterns(findall_out,imgtype):
    if imgtype == "md":
        match, tag, link, opts = findall_out
    else:
        match, link, opts = findall_out
    if imgtype == "img":
        the_link = re.search('src=\"(.*?)\"', link)
        the_link = the_link.group(1)
        print(f"here is link: {match,the_link}")
        tag=None
    else:
        the_link = re.search('\((.*?)\)', link)
        the_link = the_link.group(1)
    return match, tag, the_link, opts


@click.group()
def main():
    """
    set of tools for figure resizing
    """
    pass


def find_figs(notebook_file, imgtype):
    """
    parse a notebook and print out all image tags
    img_type:  "img" or "md"
    """
    re_dict = {"img": re_imgtag, "md": re_mdimg}
    nb_obj = jp.readf(notebook_file)
    fig_dict = {}
    fig_count = 1
    for count, the_cell in enumerate(nb_obj["cells"]):
        re_tag = re_dict[imgtype]
        print(the_cell["source"])
        print(re_tag.findall(the_cell["source"]))
        for result in re_tag.findall(the_cell["source"]):
            match, tag, the_link, opts = get_patterns(result,imgtype)
            print(f"found this link: {the_link}")
            # match, tag, the_link, opts
            fig_dict[match] = {"src": the_link}
            fig_dict[match]["fig_num"] = fig_count
            if imgtype == "md":
                fig_dict[match]["fig_tag"] = tag
            fig_dict[match]['mdfig']=f"![{fig_count}]({the_link})"
            fig_count += 1
    return fig_dict


@main.command()
@click.argument("notebook_file", type=click.File("r"), nargs=1)
@click.argument("figlist_file", type=click.File("w"), nargs=1)
@click.option("--imgtype", type=str, default="img", show_default=True, help="img or md")
def write_figfile(notebook_file, figlist_file, imgtype):
    """
    \b
    write a json file with a list of figures and their magnification
    example:

    python $e340lib/resize_figs.py write-figfile Final_paleo_build.py paleo_figs.json --imgtype md
    """
    notebook_file = Path(notebook_file.name)
    figlist_file = Path(figlist_file.name)
    if figlist_file.suffix != ".json":
        raise ValueError(f"figlist_file {figlist_file} must end in .json")
    fig_dict = find_figs(notebook_file, imgtype)
    fig_list = []
    for _, value in fig_dict.items():
        the_name = value["src"]
        the_tag = value["fig_tag"]
        fig_list.append({"name": the_name, "tag": the_tag, "size": 100})
    with open(figlist_file.name, "w") as outfile:
        json.dump(fig_list, outfile, indent=4)


@main.command()
@click.argument("notebook_file", type=click.File("r"), nargs=1)
def md_figs(notebook_file):
    """
    write new notebook file that uses markdown figures
    """
    notebook_file = Path(notebook_file.name)
    sfx = notebook_file.suffix
    output_file = f"{notebook_file.stem}_md{sfx}"
    fig_dict = find_figs(notebook_file,'img')
    with open(notebook_file, "r") as infile:
        the_text = infile.read()
        for old, value in fig_dict.items():
            new = value["mdfig"]
            print(f"old and new\n{old}\n{new}\n")
            the_text = the_text.replace(old, new)
    with open(output_file, "w") as outfile:
        outfile.write(the_text)
    print(f"wrote {outfile.name}")

@main.command()
@click.argument("in_file", type=str, nargs=1)
@click.argument("out_file", type=str, nargs=1)
def image_convert(in_file, out_file):
    """
    convert in_file to out_file
    python $e340lib/resize_figs.py image-convert fig.jpeg fig.png
    """
    in_file = Path(in_file).resolve()
    out_file = Path(out_file).resolve()
    im = Image.open(in_file)
    im.save(out_file)
    print(f"converted {in_file} to {out_file}")

    
@main.command()
@click.argument("json_file", type=click.File("r"), nargs=1)
@click.argument("dest_dir", type=str, nargs=1)
def resize(json_file, dest_dir):
    """
    json_file: str
       path to json file generated by write-figfile
    dest_dir: str
       path to the media_resize file
    """
    image_list = json.load(json_file)
    media_out_path = Path(dest_dir)
    media_out_path.mkdir(parents=True, exist_ok=True)
    for item in image_list:
        if item["size"] == 100:
            infile = Path(item["name"])
            outfile = media_out_path / infile.name
            shutil.copyfile(infile, outfile)
            print(f"straight copy to {outfile}")
        else:
            shrinkit(item["name"], media_out_path, item["size"] * 0.01)


if __name__ == "__main__":
    main()
